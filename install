#!/bin/sh

set -e

STOW_PACKAGES_PATH="$HOME"/dotfiles/packages

unlink_packages=
verbose=
for i in "$@"; do
    case "$i" in
       -s|--skip-apps)
            skip_apps=1
            shift ;;
        -v|--verbose)
            verbose=1
            shift ;;
        -u=*|--unlink=*)
            unlink_packages="${i#*=}"
            shift ;;
        -ua|--unlink-all)
            unlink_packages="$(ls $STOW_PACKAGES_PATH)"
            shift ;;
        *) ;;
    esac
done

log() {
    message=$1
    echo ðŸ“Œ "$message"
}

is_file() {
    path="$1"
    [ -f "$path" ]
}

is_dir() {
    path="$1"
    [ -d "$path" ]
}


if [ -n "$unlink_packages" ]; then
    log 'Unlinking dotfiles...'
    for unlink_pack in $unlink_packages; do
        stow -vD -d "$STOW_PACKAGES_PATH" -t ~ "$unlink_pack"
    done
    exit
fi

# check Mac
if [ "$(uname)" = "Darwin" ]; then
    if [ "$(uname -m)" = "x86_64" ]; then
        log "Intel mac"
    elif [ "$(uname -m)" = "arm64" ]; then
        log "arm64"
    fi
fi

# checking brew path to see bin file exists or not
arch_name="$(uname -m)"

if [ "${arch_name}" = "x86_64" ]; then
    if ! is_file /usr/local/bin/brew; then
        log 'Setup Homebrew'
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    fi
elif [ "${arch_name}" = "arm64" ]; then
    if ! is_file /opt/homebrew/bin/brew; then
        log 'Setup Homebrew'
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        eval "$(/opt/homebrew/bin/brew shellenv)"

        log 'Install Rosetta 2'
        sudo softwareupdate --install-rosetta
    fi
fi

# zi
# if ! is_dir ~/.zi; then
#     sh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)"
# fi

CLONE_PATH=$HOME # <- change it
# if [ ! -d "$CLONE_PATH" ]; then
#     mkdir -p "$CLONE_PATH"
# fi

# check whether dotfiles is already cloned or not
if [ ! -d "$CLONE_PATH"/dotfiles ]; then
    cd "$CLONE_PATH"
    git clone https://github.com/nuovotaka/dotfiles.git # <- change it
fi

brew bundle -v --file "$CLONE_PATH"/dotfiles/Brewfile

if [ ! -d $HOME/.config ]; then
    mkdir $HOME/.config/
fi

log 'Symlink by stow'
stow -v -d "$STOW_PACKAGES_PATH" -t $HOME $(ls $STOW_PACKAGES_PATH)

# vim
plug_path=~/.vim/bundle/Vundle.vim
if ! is_dir "$plug_path"; then
    log 'Setup Vundle vim'
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    vim +PluginInstall +qall
fi

# git
if ! is_file ~/.ssh/id_ed25519.pub; then
    log 'Setup gpg signing for git'
    ssh-keygen -t ed25519 -C "tkn.infomail@gmail.com"
    log 'Copy and pates the SSH key below to GitHub'
    cat ~/.ssh/id_ed25519.pub
fi

# asdf
for plugin in $(awk '{print $1}' ~/.tool-versions); do
    if ! is_dir ~/.asdf/plugins/"$plugin"; then
        asdf plugin add "$plugin"
    fi
done

is_runtime_versions_changed () {
    plugin="$1"
    specified=$(grep "$plugin" ~/.tool-versions | awk '{$1=""; print $0}')
    installed=$(asdf list "$plugin" 2>&1)

    is_changed=
    for version in $specified; do
        match=$(echo "$installed" | grep "$version")
        [ -z "$match" ] && is_changed=1
    done

    [ "$is_changed" ]
}

for plugin in $(asdf plugin list); do
    if is_runtime_versions_changed "$plugin"; then
        if [ "$plugin" = nodejs ]; then log "Import release team keyring for Node.JS"
            bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-release-team-keyring'
        fi

        log "Install runtime: $plugin"
        asdf plugin add "$plugin"
    fi
done
